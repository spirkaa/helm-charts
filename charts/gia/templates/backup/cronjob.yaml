{{- if .Values.pgbackrest.enabled }}
{{- range $index, $cronjob := .Values.pgbackrest.cronjobs }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "gia.pgbackrest.fullname" $ }}-{{ $cronjob.name }}
  labels:
    {{- include "gia.labels" (dict "context" $ "component" $.Values.pgbackrest.name "name" $.Values.pgbackrest.name) | nindent 4 }}
spec:
  schedule: {{ $cronjob.schedule | quote }}
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        {{- include "gia.labels" (dict "context" $ "component" $.Values.pgbackrest.name "name" $.Values.pgbackrest.name) | nindent 8 }}
    spec:
      backoffLimit: 2
      template:
        metadata:
          labels:
            {{- include "gia.labels" (dict "context" $ "component" $.Values.pgbackrest.name "name" $.Values.pgbackrest.name) | nindent 12 }}
        spec:
          serviceAccount: {{ template "gia.pgbackrest.fullname" $ }}
          {{- with $.Values.global.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          securityContext:
            {{- toYaml $.Values.global.podSecurityContext | nindent 12 }}
          containers:
            - name: {{ $.Values.pgbackrest.name }}
              securityContext:
                {{- toYaml $.Values.global.securityContext | nindent 16 }}
              image: "{{ $.Values.pgbackrest.image.repository }}:{{ $.Values.pgbackrest.image.tag | default "latest" }}"
              imagePullPolicy: {{ default $.Values.global.imagePullPolicy $.Values.pgbackrest.image.imagePullPolicy }}
              command:
                - "/bin/sh"
                - "-c"
                - |
                  POD=$(
                    kubectl get pods \
                    -n {{ $.Release.Namespace }} \
                    -l app.kubernetes.io/instance={{ $.Release.Name }} \
                    -l app.kubernetes.io/component=primary \
                    -o json | \
                    jq -r '.items[0].metadata.name'
                  )
                  kubectl -n {{ $.Release.Namespace }} exec $POD -c postgresql -- \
                    sh -c ' \
                    export PGUSER=postgres && \
                    export PGPASSWORD=$POSTGRES_POSTGRES_PASSWORD && \
                    pgbackrest stanza-create && \
                    pgbackrest --type={{ $cronjob.name }} backup'
              {{- with $.Values.pgbackrest.env }}
              env: {{- toYaml . | nindent 16 }}
              {{- end }}
              {{- with $.Values.pgbackrest.envFrom }}
              envFrom: {{- toYaml . | nindent 16 }}
              {{- end }}
          restartPolicy: Never
{{- end }}
{{- end }}
