nameOverride: ""
fullnameOverride: ""

global:
  imagePullSecrets:
    - name: regcred
  imagePullPolicy: Always
  podAnnotations: {}
  podSecurityContext: {}
    # fsGroup: 1000
  securityContext: {}
    # capabilities:
    #   drop:
    #     - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

api:
  name: api
  replicaCount: 2
  image:
    repository: git.devmem.ru/projects/gia-api
    tag: ""
  containerPort: 5000
  env:
    - name: POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name: TZ
      value: "Europe/Moscow"
    - name: DJANGO_SETTINGS_MODULE
      value: "config.settings.production"
    - name: DJANGO_ALLOWED_HOSTS
      value: "gia-api.devmem.ru"
    - name: DJANGO_LOG_LEVEL
      value: "DEBUG"
    - name: DJANGO_ADMIN_URL
      value: "a/"
    - name: DJANGO_ADMIN_MAIL
      value: "piv@devmem.ru"
    - name: DJANGO_EMAIL_SUBJECT_PREFIX
      value: "[gia.devmem.ru]"
    - name: PROMETHEUS_MULTIPROC_DIR
      value: "/tmp"
    - name: DJANGO_CACHE_URL
      value: "redis://gia-redis-master:6379/1"
    - name: DJANGO_DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: gia-db-app
          key: uri
  envFrom:
    - secretRef:
        name: secret-env
    # - configMapRef:
    #     name: cm
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
  nodeSelector: {}
  affinity: {}
  tolerations: []
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/server-snippet: |
          location /metrics {
              allow 10.0.0.0/8;
              allow 172.16.0.0/12;
              allow 192.168.0.0/16;
              deny all;
          }
    hosts:
      - host: &host gia-api.devmem.ru
        paths:
          - path: /
    tls:
      - hosts:
          - *host
        secretName: gia-api-tls
  serviceMonitor:
    create: true
  argocdHook: true
  jobs:
      # This jobs will be created and executed on every sync
      # at the same time as the application of the manifests.
    - name: migrate
      enabled: true
      hookWeight: 0
      args: ["python", "manage.py", "migrate"]
    - name: invalidate
      enabled: true
      hookWeight: 1
      args: ["python", "manage.py", "invalidate", "all"]
      # This jobs will only be created and executed once.
      # https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/
    - name: init-loaddata
      enabled: false
      hookWeight: 2
      hook: PostSync
      hookDeletePolicy: HookFailed
      helmHook: post-install
      args: ["python", "manage.py", "loaddata", "datasource"]
    - name: init-runjobs
      enabled: false
      hookWeight: 3
      hook: PostSync
      hookDeletePolicy: HookFailed
      helmHook: post-install
      args: ["python", "manage.py", "runjobs", "hourly"]
  cronjobs:
    - name: runjobs
      enabled: true
      schedule: "03 * * * *"
      args: ["python", "manage.py", "runjobs", "hourly"]
    - name: clearsessions
      enabled: true
      schedule: "05 0 * * *"
      args: ["python", "manage.py", "clearsessions"]

front:
  name: front
  replicaCount: 1
  image:
    repository: git.devmem.ru/projects/gia-front
    tag: latest
  containerPort: 80
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
  nodeSelector: {}
  affinity: {}
  tolerations: []
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      kubernetes.io/tls-acme: "true"
    hosts:
      - host: &host gia.devmem.ru
        paths:
          - path: /
    tls:
      - hosts:
          - *host
        secretName: gia-front-tls

cluster:
  fullnameOverride: gia-db
  type: postgresql
  mode: standalone
  version:
    postgresql: "17"
  cluster:
    instances: 2
    imagePullPolicy: Always
    storage:
      size: 2Gi
      storageClass: longhorn
    walStorage:
      enabled: true
      size: 1Gi
      storageClass: longhorn
    resources:
      limits:
        cpu: '2'
        memory: 512Mi
      requests:
        cpu: 50m
        memory: 512Mi
    affinity:
      enablePodAntiAffinity: true
      podAntiAffinityType: preferred
      topologyKey: kubernetes.io/hostname
    monitoring:
      enabled: true
      prometheusRule:
        excludeRules:
          - CNPGClusterHAWarning
          - CNPGClusterZoneSpreadWarning
  backups:
    enabled: true
    endpointURL: https://s3.home.devmem.ru
    provider: s3
    s3:
      bucket: gia
      path: /cnpg
    secret:
      create: false
    wal:
      compression: gzip
      encryption: ""
      maxParallel: 1
    data:
      compression: gzip
      encryption: ""
      jobs: 2
    scheduledBackups:
      - name: weekly
        schedule: "0 1 23 * * 3"
        backupOwnerReference: self
    retentionPolicy: "30d"

cluster17:
  fullnameOverride: gia-db17
  type: postgresql
  mode: recovery
  recovery:
    method: import
    import:
      type: microservice
      databases:
        - app
      source:
        host: gia-db-rw
        port: 5432
        username: postgres
        database: postgres
        sslMode: disable
        passwordSecret:
          create: false
          name: gia-db-superuser
          key: password
  version:
    postgresql: "17"
  cluster:
    instances: 1
    imagePullPolicy: Always
    initdb:
      localeProvider: icu
      icuLocale: ru-x-icu
    storage:
      size: 2Gi
      storageClass: longhorn
    walStorage:
      enabled: true
      size: 1Gi
      storageClass: longhorn
    resources:
      limits:
        cpu: '2'
        memory: 512Mi
      requests:
        cpu: 50m
        memory: 512Mi
    affinity:
      enablePodAntiAffinity: true
      podAntiAffinityType: preferred
      topologyKey: kubernetes.io/hostname
    monitoring:
      enabled: true
      prometheusRule:
        excludeRules:
          - CNPGClusterHAWarning
          - CNPGClusterZoneSpreadWarning
  backups:
    enabled: true
    endpointURL: https://s3.home.devmem.ru
    provider: s3
    s3:
      bucket: gia
      path: /gia-db17
    secret:
      create: false
    wal:
      compression: gzip
      encryption: ""
      maxParallel: 1
    data:
      compression: gzip
      encryption: ""
      jobs: 2
    scheduledBackups:
      - name: weekly
        schedule: "0 1 23 * * 3"
        backupOwnerReference: self
    retentionPolicy: "30d"

redis:
  architecture: standalone
  auth:
    enabled: false
  commonConfiguration: |-
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    stop-writes-on-bgsave-error no
  master:
    revisionHistoryLimit: 2
    disableCommands: []
    resources:
      limits:
        cpu: '2'
        memory: 512Mi
        ephemeral-storage: 2Gi
      requests:
        cpu: 10m
        memory: 512Mi
        ephemeral-storage: 50Mi
    persistence:
      enabled: true
      storageClass: longhorn
      size: 1Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
    resources:
      limits:
        cpu: '2'
        memory: 128Mi
        ephemeral-storage: 2Gi
      requests:
        cpu: 10m
        memory: 32Mi
        ephemeral-storage: 50Mi
